'use strict';

exports.__esModule = true;
exports.onInitialLoad = exports.isBrowser = exports.createNewEventModern = exports.createNewEventLegacy = exports.addListener = exports.removeListener = exports.getNormalizedEventName = undefined;

var _constants = require('./constants');

/**
 * @function getNormalizedEventName
 *
 * @description
 * get the normalized event name for the print action
 *
 * @param {string} eventName the name of the event to trigger
 * @returns {string} the normalized event name
 */
var getNormalizedEventName = exports.getNormalizedEventName = function getNormalizedEventName(eventName) {
  var lowercaseName = eventName.toLowerCase();

  if (lowercaseName === _constants.AFTER_PRINT || lowercaseName === _constants.AFTER) {
    return _constants.AFTER_PRINT;
  }

  if (lowercaseName === _constants.BEFORE_PRINT || lowercaseName === _constants.BEFORE) {
    return _constants.BEFORE_PRINT;
  }

  throw new ReferenceError('The event "' + eventName + '" is invalid, it must be either "afterprint" or "beforeprint".');
};

/**
 * @function removeListener
 *
 * @description
 * remove an existing listener with the handler function passed
 *
 * @param {{afterprint: Array<function>, beforeprint: Array<function>}} handlers the instance handlers
 * @param {string} eventName the event name passed
 * @param {function} handler the handler to unapply
 */
// constants
var removeListener = exports.removeListener = function removeListener(handlers, eventName, handler) {
  var event = getNormalizedEventName(eventName);
  var indexOfHandler = handlers[event].indexOf(handler);

  if (~indexOfHandler) {
    window.removeEventListener(event, handler);

    handlers[event] = handlers[event].slice(0, indexOfHandler).concat(handlers[event].slice(indexOfHandler + 1));
  }
};

/**
 * @function addListener
 *
 * @description
 * add a new listener with the handler function passed
 *
 * @param {{afterprint: Array<function>, beforeprint: Array<function>}} handlers the instance handlers
 * @param {string} eventName the event name passed
 * @param {function} handler the handler to apply
 * @returns {function} the handler
 */
var addListener = exports.addListener = function addListener(handlers, eventName, handler) {
  var event = getNormalizedEventName(eventName);

  window.addEventListener(event, handler);

  handler.off = function off() {
    return removeListener.call(this, handlers, event, handler);
  };

  handlers[event] = [].concat(handlers[event], [handler]);

  return handler;
};

/**
 * @function createNewEventLegacy
 *
 * @description
 * if new Event() syntax is unsupported, use the legacy technique to create a new event
 *
 * @param {string} eventName the name of the event to fire
 * @returns {Event} the event to fire
 */
var createNewEventLegacy = exports.createNewEventLegacy = function createNewEventLegacy(eventName) {
  var event = document.createEvent('Event');

  event.initEvent(eventName, false, false);

  return event;
};

/**
 * @function createNewEventModern
 *
 * @description
 * if new Event() syntax is supported, use it to create a new event
 *
 * @param {string} eventName the name of the event to fire
 * @returns {Event} the event to fire
 */
var createNewEventModern = exports.createNewEventModern = function createNewEventModern(eventName) {
  return new Event(eventName);
};

/**
 * @function isBrowser
 *
 * @description
 * are we in a browser environment
 *
 * @returns  {boolean} are we in a browser
 */
var isBrowser = exports.isBrowser = function isBrowser() {
  return typeof window !== 'undefined';
};

/**
 * @function onInitialLoad
 *
 * @description
 * on load, set the global values for support and media queries
 *
 * @returns {void}
 */
var onInitialLoad = exports.onInitialLoad = function onInitialLoad() {
  if (!isBrowser()) {
    return;
  }

  _constants.GLOBAL_VALUES.hasMatchMediaSupport = 'matchMedia' in window;
  _constants.GLOBAL_VALUES.hasOnAfterPrintSupport = 'on' + _constants.AFTER_PRINT in window;
  _constants.GLOBAL_VALUES.hasOnBeforePrintSupport = 'on' + _constants.BEFORE_PRINT in window;

  _constants.GLOBAL_VALUES.hasPrintEventSupport = _constants.GLOBAL_VALUES.hasMatchMediaSupport || _constants.GLOBAL_VALUES.hasOnAfterPrintSupport && _constants.GLOBAL_VALUES.hasOnBeforePrintSupport;

  try {
    new Event(_constants.AFTER_PRINT);

    _constants.GLOBAL_VALUES.hasNewErrorSupport = true;
  } catch (error) {
    _constants.GLOBAL_VALUES.hasNewErrorSupport = false;
  }

  _constants.GLOBAL_VALUES.createNewEvent = _constants.GLOBAL_VALUES.hasNewErrorSupport ? createNewEventModern : createNewEventLegacy;

  if (_constants.GLOBAL_VALUES.hasMatchMediaSupport) {
    _constants.GLOBAL_VALUES.mql = window.matchMedia('print');

    if (!_constants.GLOBAL_VALUES.hasOnAfterPrintSupport) {
      _constants.GLOBAL_VALUES.mql.addListener(function (mqlEvent) {
        if (!mqlEvent.matches) {
          window.dispatchEvent(_constants.GLOBAL_VALUES.createNewEvent(_constants.AFTER_PRINT));
        }
      });
    }

    if (!_constants.GLOBAL_VALUES.hasOnBeforePrintSupport) {
      _constants.GLOBAL_VALUES.mql.addListener(function (mqlEvent) {
        if (mqlEvent.matches) {
          window.dispatchEvent(_constants.GLOBAL_VALUES.createNewEvent(_constants.AFTER_PRINT));
        }
      });
    }
  }

  _constants.GLOBAL_VALUES.isInitialized = true;
};