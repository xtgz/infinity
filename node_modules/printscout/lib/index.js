'use strict';

exports.__esModule = true;

var _constants = require('./constants');

var _utils = require('./utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // constants


// utils


var keys = Object.keys;

/**
 * @class PrintScout
 * @classdesc instance of handlers for before / after print is triggered
 */

var PrintScout = function () {
  function PrintScout() {
    _classCallCheck(this, PrintScout);

    this.handlers = {
      afterprint: [],
      beforeprint: []
    };

    if (!_constants.GLOBAL_VALUES.isInitialized) {
      (0, _utils.onInitialLoad)(this);
    }

    if ((0, _utils.isBrowser)() && !_constants.GLOBAL_VALUES.hasPrintEventSupport) {
      /* eslint-disable no-console */
      console.warn('Sorry, it looks like this browser does not support print event handlers.');
      /* eslint-enable */
    }
  }

  /**
   * @var {{afterprint: Array<function>, beforeprint: Array<function>}} handlers
   * @instance
   */


  /**
   * @function add
   * @memberof PrintScout
   *
   * @description
   * convenience method to add an afterprint event listener
   *
   * @param {function} handler the handler for the new listener
   * @returns {function} the handler
   */
  PrintScout.prototype.after = function after(handler) {
    return this.on(_constants.AFTER_PRINT, handler);
  };

  /**
   * @function before
   * @memberof PrintScout
   *
   * @description
   * convenience method to add a beforeprint event listener
   *
   * @param {function} handler the handler for the new listener
   * @returns {function} the handler
   */


  PrintScout.prototype.before = function before(handler) {
    return this.on(_constants.BEFORE_PRINT, handler);
  };

  /**
   * @function on
   * @memberof PrintScout
   *
   * @description
   * add a new event listener based on the eventName passed
   *
   * @param {string} eventName the name of the event to listen for
   * @param {function} handler th handler for the event
   * @returns {function} the handler
   */


  PrintScout.prototype.on = function on(eventName, handler) {
    return (0, _utils.addListener)(this.handlers, eventName, handler);
  };

  /**
   * @function off
   * @memberof PrintScout
   *
   * @description
   * remove an event listener, or a series of event listeners
   *
   * @param {string} [eventName] the name of the event to stop listening for
   * @param {function} [handler] the handler to remove
   * @returns {PrintScout} the instance
   */


  PrintScout.prototype.off = function off(eventName, handler) {
    var _this = this;

    if (handler) {
      return (0, _utils.removeListener)(this.handlers, eventName, handler);
    }

    if (eventName) {
      var event = (0, _utils.getNormalizedEventName)(eventName);

      return this.handlers[event].forEach(function (handler) {
        return (0, _utils.removeListener)(_this.handlers, event, handler);
      });
    }

    return keys(this.handlers).forEach(function (type) {
      return _this.handlers[type].forEach(function (handler) {
        return (0, _utils.removeListener)(_this.handlers, type, handler);
      });
    });
  };

  return PrintScout;
}();

exports.default = PrintScout;