/**
 * @notExported
 */
declare class GettextBuilder {
    private locale?;
    private translations;
    private debug;
    setLanguage(language: string): GettextBuilder;
    /** Try to detect locale from context with `en` as fallback value */
    detectLocale(): GettextBuilder;
    addTranslation(language: string, data: object): GettextBuilder;
    enableDebugMode(): GettextBuilder;
    build(): GettextWrapper;
}
/**
 * @notExported
 */
declare class GettextWrapper {
    private gt;
    constructor(locale: string, data: object, debug: boolean);
    private subtitudePlaceholders;
    /**
     * Get translated string (singular form), optionally with placeholders
     *
     * @param original original string to translate
     * @param placeholders map of placeholder key to value
     */
    gettext(original: string, placeholders?: Record<string, string | number>): string;
    /**
     * Get translated string with plural forms
     *
     * @param singular Singular text form
     * @param plural Plural text form to be used if `count` requires it
     * @param count The number to insert into the text
     * @param placeholders optional map of placeholder key to value
     */
    ngettext(singular: string, plural: string, count: number, placeholders?: Record<string, string | number>): string;
}
/**
 * Create a new GettextBuilder instance
 */
export declare function getGettextBuilder(): GettextBuilder;
export {};
