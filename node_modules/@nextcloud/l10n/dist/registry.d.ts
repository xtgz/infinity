/// <reference types="@nextcloud/typings" />
/**
 * Translation bundle
 *
 * @example For German translation
 * ```json
    {
        "some": "einige",
        "_%n tree_::_%n trees_": [
            "%n Baum",
            "%n BÃ¤ume"
        ]
    }
```
 */
export type Translations = Record<string, string | string[] | undefined>;
/**
 * Function for getting plural form index from translated number
 *
 * @param number Input number to translate
 * @return Index of translation plural form
 * @example For most languages, like English or German
 * ```js
(number:number) => number === 1 ? 0 : 1
```
 */
export type PluralFunction = (number: number) => number;
/**
 * Extended window interface with translation registry
 * Exported just for internal testing purpose
 *
 * @private
 */
export interface NextcloudWindowWithRegistry extends Nextcloud.v27.WindowWithGlobals {
    _oc_l10n_registry_translations?: Record<string, Translations>;
    _oc_l10n_registry_plural_functions?: Record<string, PluralFunction>;
}
interface AppTranslations {
    translations: Translations;
    pluralFunction: PluralFunction;
}
/**
 * Check if translations and plural function are set for given app
 *
 * @param {string} appId the app id
 * @return {boolean}
 */
export declare function hasAppTranslations(appId: string): boolean;
/**
 * Register new, or extend available, translations for an app
 *
 * @param {string} appId the app id
 * @param {object} translations the translations list
 * @param {Function} pluralFunction the plural function
 */
export declare function registerAppTranslations(appId: string, translations: Translations, pluralFunction: PluralFunction): void;
/**
 * Unregister all translations and plural function for given app
 *
 * @param {string} appId the app id
 */
export declare function unregisterAppTranslations(appId: string): void;
/**
 * Get translations bundle for given app and current locale
 *
 * @param {string} appId the app id
 * @return {object}
 */
export declare function getAppTranslations(appId: string): AppTranslations;
export {};
