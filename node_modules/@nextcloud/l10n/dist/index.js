'use strict';

var router = require('@nextcloud/router');
var DOMPurify = require('dompurify');
var escapeHTML = require('escape-html');

/// <reference types="@nextcloud/typings" />
/**
 * Get the first day of the week
 *
 * @return {number}
 */
function getFirstDay() {
    if (typeof window.firstDay === 'undefined') {
        console.warn('No firstDay found');
        return 1;
    }
    return window.firstDay;
}
/**
 * Get a list of day names (full names)
 *
 * @return {string[]}
 */
function getDayNames() {
    if (typeof window.dayNames === 'undefined') {
        console.warn('No dayNames found');
        return [
            'Sunday',
            'Monday',
            'Tuesday',
            'Wednesday',
            'Thursday',
            'Friday',
            'Saturday',
        ];
    }
    return window.dayNames;
}
/**
 * Get a list of day names (short names)
 *
 * @return {string[]}
 */
function getDayNamesShort() {
    if (typeof window.dayNamesShort === 'undefined') {
        console.warn('No dayNamesShort found');
        return ['Sun.', 'Mon.', 'Tue.', 'Wed.', 'Thu.', 'Fri.', 'Sat.'];
    }
    return window.dayNamesShort;
}
/**
 * Get a list of day names (minified names)
 *
 * @return {string[]}
 */
function getDayNamesMin() {
    if (typeof window.dayNamesMin === 'undefined') {
        console.warn('No dayNamesMin found');
        return ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
    }
    return window.dayNamesMin;
}
/**
 * Get a list of month names (full names)
 *
 * @return {string[]}
 */
function getMonthNames() {
    if (typeof window.monthNames === 'undefined') {
        console.warn('No monthNames found');
        return [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ];
    }
    return window.monthNames;
}
/**
 * Get a list of month names (short names)
 *
 * @return {string[]}
 */
function getMonthNamesShort() {
    if (typeof window.monthNamesShort === 'undefined') {
        console.warn('No monthNamesShort found');
        return [
            'Jan.',
            'Feb.',
            'Mar.',
            'Apr.',
            'May.',
            'Jun.',
            'Jul.',
            'Aug.',
            'Sep.',
            'Oct.',
            'Nov.',
            'Dec.',
        ];
    }
    return window.monthNamesShort;
}

/**
 * Returns the user's locale
 */
function getLocale() {
    return document.documentElement.dataset.locale || 'en';
}
/**
 * Returns user's locale in canonical form
 * E.g. `en-US` instead of `en_US`
 */
function getCanonicalLocale() {
    return getLocale().replace(/_/g, '-');
}
/**
 * Returns the user's language
 */
function getLanguage() {
    return document.documentElement.lang || 'en';
}
/**
 * Check whether the current, or a given, language is read right-to-left
 *
 * @param language Language code to check, defaults to current language
 */
function isRTL(language) {
    const languageCode = language || getLanguage();
    // Source: https://meta.wikimedia.org/wiki/Template:List_of_language_names_ordered_by_code
    const rtlLanguages = [
        /* eslint-disable no-multi-spaces */
        'ae',
        'ar',
        'arc',
        'arz',
        'bcc',
        'bqi',
        'ckb',
        'dv',
        'fa',
        'glk',
        'ha',
        'he',
        'khw',
        'ks',
        'ku',
        'mzn',
        'nqo',
        'pnb',
        'ps',
        'sd',
        'ug',
        'ur',
        'uzs',
        'yi', // 'ייִדיש', Yiddish
        /* eslint-enable no-multi-spaces */
    ];
    // special case for Uzbek Afghan
    if ((language || getCanonicalLocale()).startsWith('uz-AF')) {
        return true;
    }
    return rtlLanguages.includes(languageCode);
}

/// <reference types="@nextcloud/typings" />
/**
 * Check if translations and plural function are set for given app
 *
 * @param {string} appId the app id
 * @return {boolean}
 */
function hasAppTranslations(appId) {
    var _a, _b;
    return (((_a = window._oc_l10n_registry_translations) === null || _a === void 0 ? void 0 : _a[appId]) !== undefined
        && ((_b = window._oc_l10n_registry_plural_functions) === null || _b === void 0 ? void 0 : _b[appId]) !== undefined);
}
/**
 * Register new, or extend available, translations for an app
 *
 * @param {string} appId the app id
 * @param {object} translations the translations list
 * @param {Function} pluralFunction the plural function
 */
function registerAppTranslations(appId, translations, pluralFunction) {
    var _a;
    window._oc_l10n_registry_translations = Object.assign(window._oc_l10n_registry_translations || {}, {
        [appId]: Object.assign(((_a = window._oc_l10n_registry_translations) === null || _a === void 0 ? void 0 : _a[appId]) || {}, translations),
    });
    window._oc_l10n_registry_plural_functions = Object.assign(window._oc_l10n_registry_plural_functions || {}, {
        [appId]: pluralFunction,
    });
}
/**
 * Unregister all translations and plural function for given app
 *
 * @param {string} appId the app id
 */
function unregisterAppTranslations(appId) {
    var _a, _b;
    (_a = window._oc_l10n_registry_translations) === null || _a === void 0 ? true : delete _a[appId];
    (_b = window._oc_l10n_registry_plural_functions) === null || _b === void 0 ? true : delete _b[appId];
}
/**
 * Get translations bundle for given app and current locale
 *
 * @param {string} appId the app id
 * @return {object}
 */
function getAppTranslations(appId) {
    var _a, _b, _c, _d;
    return {
        translations: (_b = (_a = window._oc_l10n_registry_translations) === null || _a === void 0 ? void 0 : _a[appId]) !== null && _b !== void 0 ? _b : {},
        pluralFunction: (_d = (_c = window._oc_l10n_registry_plural_functions) === null || _c === void 0 ? void 0 : _c[appId]) !== null && _d !== void 0 ? _d : ((number) => number),
    };
}

/**
 * Translate a string
 *
 * @param {string} app the id of the app for which to translate the string
 * @param {string} text the string to translate
 * @param {object} vars map of placeholder key to value
 * @param {number} number to replace %n with
 * @param {object} [options] options object
 * @return {string}
 */
function translate(app, text, vars, number, options) {
    const defaultOptions = {
        escape: true,
        sanitize: true,
    };
    const allOptions = Object.assign({}, defaultOptions, options || {});
    const identity = (value) => value;
    const optSanitize = allOptions.sanitize ? DOMPurify.sanitize : identity;
    const optEscape = allOptions.escape ? escapeHTML : identity;
    // TODO: cache this function to avoid inline recreation
    // of the same function over and over again in case
    // translate() is used in a loop
    const _build = (text, vars, number) => {
        return text.replace(/%n/g, '' + number).replace(/{([^{}]*)}/g, (match, key) => {
            if (vars === undefined || !(key in vars)) {
                return optSanitize(match);
            }
            const r = vars[key];
            if (typeof r === 'string' || typeof r === 'number') {
                return optSanitize(optEscape(r));
            }
            else {
                return optSanitize(match);
            }
        });
    };
    const bundle = getAppTranslations(app);
    let translation = bundle.translations[text] || text;
    translation = Array.isArray(translation) ? translation[0] : translation;
    if (typeof vars === 'object' || number !== undefined) {
        return optSanitize(_build(translation, vars, number));
    }
    else {
        return optSanitize(translation);
    }
}
/**
 * Translate a string containing an object which possibly requires a plural form
 *
 * @param {string} app the id of the app for which to translate the string
 * @param {string} textSingular the string to translate for exactly one object
 * @param {string} textPlural the string to translate for n objects
 * @param {number} number number to determine whether to use singular or plural
 * @param {object} vars of placeholder key to value
 * @param {object} options options object
 */
function translatePlural(app, textSingular, textPlural, number, vars, options) {
    const identifier = '_' + textSingular + '_::_' + textPlural + '_';
    const bundle = getAppTranslations(app);
    const value = bundle.translations[identifier];
    if (typeof value !== 'undefined') {
        const translation = value;
        if (Array.isArray(translation)) {
            const plural = bundle.pluralFunction(number);
            return translate(app, translation[plural], vars, number, options);
        }
    }
    if (number === 1) {
        return translate(app, textSingular, vars, number, options);
    }
    else {
        return translate(app, textPlural, vars, number, options);
    }
}
/**
 * Load an app's translation bundle if not loaded already.
 *
 * @param {string} appName name of the app
 * @param {Function} callback callback to be called when
 * the translations are loaded
 * @return {Promise} promise
 */
function loadTranslations(appName, callback) {
    if (hasAppTranslations(appName) || getLocale() === 'en') {
        return Promise.resolve().then(callback);
    }
    const url = router.generateFilePath(appName, 'l10n', getLocale() + '.json');
    const promise = new Promise((resolve, reject) => {
        const request = new XMLHttpRequest();
        request.open('GET', url, true);
        request.onerror = () => {
            reject(new Error(request.statusText || 'Network error'));
        };
        request.onload = () => {
            if (request.status >= 200 && request.status < 300) {
                try {
                    const bundle = JSON.parse(request.responseText);
                    if (typeof bundle.translations === 'object')
                        resolve(bundle);
                }
                catch (error) {
                    // error is probably a SyntaxError due to invalid response text, this is handled by next line
                }
                reject(new Error('Invalid content of translation bundle'));
            }
            else {
                reject(new Error(request.statusText));
            }
        };
        request.send();
    });
    // load JSON translation bundle per AJAX
    return promise
        .then((result) => {
        register(appName, result.translations);
        return result;
    })
        .then(callback);
}
/**
 * Register an app's translation bundle.
 *
 * @param {string} appName name of the app
 * @param {Object<string, string>} bundle translation bundle
 */
function register(appName, bundle) {
    registerAppTranslations(appName, bundle, getPlural);
}
/**
 * Unregister all translations of an app
 *
 * @param appName name of the app
 * @since 2.1.0
 */
function unregister(appName) {
    return unregisterAppTranslations(appName);
}
/**
 * Get array index of translations for a plural form
 *
 *
 * @param {number} number the number of elements
 * @return {number} 0 for the singular form(, 1 for the first plural form, ...)
 */
function getPlural(number) {
    let language = getLanguage();
    if (language === 'pt-BR') {
        // temporary set a locale for brazilian
        language = 'xbr';
    }
    if (language.length > 3) {
        language = language.substring(0, language.lastIndexOf('-'));
    }
    /*
     * The plural rules are derived from code of the Zend Framework (2010-09-25),
     * which is subject to the new BSD license (http://framework.zend.com/license/new-bsd).
     * Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
     */
    switch (language) {
        case 'az':
        case 'bo':
        case 'dz':
        case 'id':
        case 'ja':
        case 'jv':
        case 'ka':
        case 'km':
        case 'kn':
        case 'ko':
        case 'ms':
        case 'th':
        case 'tr':
        case 'vi':
        case 'zh':
            return 0;
        case 'af':
        case 'bn':
        case 'bg':
        case 'ca':
        case 'da':
        case 'de':
        case 'el':
        case 'en':
        case 'eo':
        case 'es':
        case 'et':
        case 'eu':
        case 'fa':
        case 'fi':
        case 'fo':
        case 'fur':
        case 'fy':
        case 'gl':
        case 'gu':
        case 'ha':
        case 'he':
        case 'hu':
        case 'is':
        case 'it':
        case 'ku':
        case 'lb':
        case 'ml':
        case 'mn':
        case 'mr':
        case 'nah':
        case 'nb':
        case 'ne':
        case 'nl':
        case 'nn':
        case 'no':
        case 'oc':
        case 'om':
        case 'or':
        case 'pa':
        case 'pap':
        case 'ps':
        case 'pt':
        case 'so':
        case 'sq':
        case 'sv':
        case 'sw':
        case 'ta':
        case 'te':
        case 'tk':
        case 'ur':
        case 'zu':
            return number === 1 ? 0 : 1;
        case 'am':
        case 'bh':
        case 'fil':
        case 'fr':
        case 'gun':
        case 'hi':
        case 'hy':
        case 'ln':
        case 'mg':
        case 'nso':
        case 'xbr':
        case 'ti':
        case 'wa':
            return number === 0 || number === 1 ? 0 : 1;
        case 'be':
        case 'bs':
        case 'hr':
        case 'ru':
        case 'sh':
        case 'sr':
        case 'uk':
            return number % 10 === 1 && number % 100 !== 11
                ? 0
                : number % 10 >= 2
                    && number % 10 <= 4
                    && (number % 100 < 10 || number % 100 >= 20)
                    ? 1
                    : 2;
        case 'cs':
        case 'sk':
            return number === 1 ? 0 : number >= 2 && number <= 4 ? 1 : 2;
        case 'ga':
            return number === 1 ? 0 : number === 2 ? 1 : 2;
        case 'lt':
            return number % 10 === 1 && number % 100 !== 11
                ? 0
                : number % 10 >= 2 && (number % 100 < 10 || number % 100 >= 20)
                    ? 1
                    : 2;
        case 'sl':
            return number % 100 === 1
                ? 0
                : number % 100 === 2
                    ? 1
                    : number % 100 === 3 || number % 100 === 4
                        ? 2
                        : 3;
        case 'mk':
            return number % 10 === 1 ? 0 : 1;
        case 'mt':
            return number === 1
                ? 0
                : number === 0 || (number % 100 > 1 && number % 100 < 11)
                    ? 1
                    : number % 100 > 10 && number % 100 < 20
                        ? 2
                        : 3;
        case 'lv':
            return number === 0
                ? 0
                : number % 10 === 1 && number % 100 !== 11
                    ? 1
                    : 2;
        case 'pl':
            return number === 1
                ? 0
                : number % 10 >= 2
                    && number % 10 <= 4
                    && (number % 100 < 12 || number % 100 > 14)
                    ? 1
                    : 2;
        case 'cy':
            return number === 1
                ? 0
                : number === 2
                    ? 1
                    : number === 8 || number === 11
                        ? 2
                        : 3;
        case 'ro':
            return number === 1
                ? 0
                : number === 0 || (number % 100 > 0 && number % 100 < 20)
                    ? 1
                    : 2;
        case 'ar':
            return number === 0
                ? 0
                : number === 1
                    ? 1
                    : number === 2
                        ? 2
                        : number % 100 >= 3 && number % 100 <= 10
                            ? 3
                            : number % 100 >= 11 && number % 100 <= 99
                                ? 4
                                : 5;
        default:
            return 0;
    }
}

exports.getCanonicalLocale = getCanonicalLocale;
exports.getDayNames = getDayNames;
exports.getDayNamesMin = getDayNamesMin;
exports.getDayNamesShort = getDayNamesShort;
exports.getFirstDay = getFirstDay;
exports.getLanguage = getLanguage;
exports.getLocale = getLocale;
exports.getMonthNames = getMonthNames;
exports.getMonthNamesShort = getMonthNamesShort;
exports.getPlural = getPlural;
exports.isRTL = isRTL;
exports.loadTranslations = loadTranslations;
exports.register = register;
exports.translate = translate;
exports.translatePlural = translatePlural;
exports.unregister = unregister;
