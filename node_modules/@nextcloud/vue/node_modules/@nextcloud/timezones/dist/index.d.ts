import { default as default_2 } from 'ical.js';

/**
 * Get human-readable name for timezoneId
 *
 * @param timezoneId - TimezoneId to turn human-readable
 */
export declare function getReadableTimezoneName(timezoneId: string): string;

/**
 * @param timezoneList - List of Olsen timezones
 * @param additionalTimezones - List of additional timezones
 * @param globalTimezoneName - The localized name of the "Global" timezones
 */
export declare function getSortedTimezoneList(timezoneList?: string[], additionalTimezones?: ITimezone[], globalTimezoneName?: string): IContinent[];

/**
 * Gets the default instance of the timezone manager
 */
export declare function getTimezoneManager(): TimezoneManager;

export declare interface IContinent {
    continent: string;
    regions: IRegion[];
}

/**
 * SPDX-FileCopyrightText: 2021-2024 Nextcloud GmbH and Nextcloud contributors
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
export declare interface IRegion {
    cities: string[];
    label: string;
    timezoneId: string;
}

/**
 * @param tzName Name of the timezone to check
 */
export declare function isOlsonTimezone(tzName: string): boolean;

export declare interface ITimezone {
    continent: string;
    label: string;
    timezoneId: string;
}

export declare class Timezone {
    /**
     * Id of the timezone.
     */
    private _timezoneId?;
    /**
     * ICS representation of the timezone
     */
    private _ics?;
    private _timezone?;
    private _initialized;
    /**
     * Constructor
     *
     * @param timezoneId - Id of the timezone
     * @param ics - The iCalendar timezone definition
     */
    constructor(timezoneId: string, ics: string);
    constructor(timezoneId: default_2.Timezone | default_2.Component);
    /**
     * Get the timezone id
     */
    get timezoneId(): string;
    /**
     * Get the UTC Offset for a given date in this timezone.
     *
     * @param year - Year of the date
     * @param month - Month of the date (1-based)
     * @param day - Day of the date
     * @param hour - Hour of the date
     * @param minute - Minute of the date
     * @param second - Second of the date
     */
    offsetForArray(year: number, month: number, day?: number, hour?: number, minute?: number, second?: number): number;
    /**
     * Converts a timestamp to an array of year, month, day, hour, minute, second.
     *
     * @param {number} ms Timestamp in milliseconds
     * @return {number[]}
     */
    timestampToArray(ms: number): number[];
    toICALTimezone(): default_2.Timezone;
    /**
     * Returns the corresponding ICAL.
     */
    toICALJs(): default_2.Component;
    /**
     * Initializes the inner ICAL.Timezone component if not already done.
     */
    private get timezone();
    static get utc(): Timezone;
    static get floating(): Timezone;
}

export declare class TimezoneManager {
    /**
     * Map of aliases
     * Alias name => timezoneId
     */
    private _aliases;
    /**
     * Map of Timezones
     * timezoneId => Timezone
     */
    private _timezones;
    /**
     * List of aliases that were registered while their targets were missing
     * [[aliasName, timezoneId], ...]
     */
    private _pendingAliases;
    /**
     * Gets a timezone for the given id.
     *
     * @param timezoneId - The id of the timezone
     */
    getTimezoneForId(timezoneId: string): Timezone | null;
    /**
     * Checks if there is a timezone for the given id stored in this manager.
     *
     * @param timezoneId - The id of the timezone
     */
    hasTimezoneForId(timezoneId: string): boolean;
    /**
     * Checks if the given timezone id is an alias.
     *
     * @param timezoneId - The id of the timezone
     */
    isAlias(timezoneId: string): boolean;
    /**
     * Lists all timezones.
     *
     * @param includeAliases - Whether or not to include aliases
     */
    listAllTimezones(includeAliases?: boolean): string[];
    /**
     * Registers a timezone
     *
     * @param timezone - The timezone-object to register
     */
    registerTimezone(timezone: Timezone): void;
    registerDefaultTimezones(): void;
    /**
     * Registers a timezone based on ics data.
     *
     * @param timezoneId - The id of the timezone
     * @param ics - The iCalendar timezone definition
     */
    registerTimezoneFromICS(timezoneId: string, ics: string): void;
    /**
     * Registers a new timezone-alias
     *
     * @param aliasName - The timezone-id of the alias
     * @param timezoneId - The timezone-id to resolve the alias to
     */
    registerAlias(aliasName: string, timezoneId: string): void;
    /**
     * Unregisters a timezone.
     *
     * @param timezoneId - Unregisters a timezone by Id
     */
    unregisterTimezones(timezoneId: string): void;
    /**
     * Unregisters a timezone-alias.
     *
     * @param aliasName - The alias to unregister
     */
    unregisterAlias(aliasName: string): void;
    /**
     * Clear all timezones
     */
    clearAllTimezones(): void;
}

export { }
