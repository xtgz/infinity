{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/timezone.ts","../src/timezoneManager.ts"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2021-2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nexport interface IRegion {\n\tcities: string[]\n\tlabel: string\n\ttimezoneId: string\n}\n\nexport interface IContinent {\n\tcontinent: string\n\tregions: IRegion[]\n}\n\nexport interface ITimezone {\n\tcontinent: string\n\tlabel: string\n\ttimezoneId: string\n}\n\n/**\n * @param timezoneList - List of Olsen timezones\n * @param additionalTimezones - List of additional timezones\n * @param globalTimezoneName - The localized name of the \"Global\" timezones\n */\nexport function getSortedTimezoneList(\n\ttimezoneList: string[] = [],\n\tadditionalTimezones: ITimezone[] = [],\n\tglobalTimezoneName = 'Global',\n): IContinent[] {\n\tconst sortedByContinent = new Map<string, IContinent>()\n\tfor (const timezoneId of timezoneList) {\n\t\tconst components = timezoneId.split('/')\n\t\tlet [continent, name] = [components.shift()!, components.join('/')]\n\t\tif (!name) {\n\t\t\tname = continent\n\t\t\tcontinent = globalTimezoneName\n\t\t}\n\n\t\tif (!sortedByContinent.has(continent)) {\n\t\t\tsortedByContinent.set(continent, {\n\t\t\t\tcontinent,\n\t\t\t\tregions: [],\n\t\t\t})\n\t\t}\n\n\t\tsortedByContinent.get(continent)!.regions.push({\n\t\t\tlabel: getReadableTimezoneName(name),\n\t\t\tcities: [],\n\t\t\ttimezoneId,\n\t\t})\n\t}\n\n\tfor (const { continent, label, timezoneId } of additionalTimezones) {\n\t\tif (!sortedByContinent.has(continent)) {\n\t\t\tsortedByContinent.set(continent, {\n\t\t\t\tcontinent,\n\t\t\t\tregions: [],\n\t\t\t})\n\t\t}\n\n\t\tsortedByContinent.get(continent)!.regions.push({\n\t\t\tlabel,\n\t\t\tcities: [],\n\t\t\ttimezoneId,\n\t\t})\n\t}\n\n\t// create list sorted by continents\n\tconst sortedList = [...sortedByContinent.values()]\n\t\t.sort((a, b) => a.continent.localeCompare(b.continent))\n\t// sort all regions inside the sorted list\n\tfor (const { regions } of sortedList) {\n\t\tregions.sort((a, b) => a.label.localeCompare(b.label))\n\t}\n\n\treturn sortedList\n}\n\n/**\n * Get human-readable name for timezoneId\n *\n * @param timezoneId - TimezoneId to turn human-readable\n */\nexport function getReadableTimezoneName(timezoneId: string): string {\n\treturn timezoneId\n\t\t.split('_')\n\t\t.join(' ')\n\t\t.replace('St ', 'St. ')\n\t\t.split('/')\n\t\t.join(' - ')\n}\n\n/**\n * @param tzName Name of the timezone to check\n */\nexport function isOlsonTimezone(tzName: string): boolean {\n\tconst hasSlash = tzName.includes('/')\n\tconst hasSpace = tzName.includes(' ')\n\tconst startsWithETC = tzName.startsWith('Etc')\n\tconst startsWithUS = tzName.startsWith('US/')\n\n\treturn hasSlash && !hasSpace && !startsWithETC && !startsWithUS\n}\n","/**\n * SPDX-FileCopyrightText: 2019-2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport ICAL from 'ical.js'\n\nexport class Timezone {\n\n\t/**\n\t * Id of the timezone.\n\t */\n\tprivate _timezoneId?: string\n\n\t/**\n\t * ICS representation of the timezone\n\t */\n\tprivate _ics?: string\n\n\tprivate _timezone?: ICAL.Timezone\n\n\tprivate _initialized: boolean\n\n\t/**\n\t * Constructor\n\t *\n\t * @param timezoneId - Id of the timezone\n\t * @param ics - The iCalendar timezone definition\n\t */\n\tconstructor(timezoneId: string, ics: string)\n\tconstructor(timezoneId: ICAL.Timezone | ICAL.Component)\n\tconstructor(timezoneId: string | ICAL.Timezone | ICAL.Component, ics?: string) {\n\t\t// If the first parameter is already\n\t\t// an instance of ICAL.Timezone,\n\t\t// skip lazy loading\n\t\tif (timezoneId instanceof ICAL.Timezone) {\n\t\t\tthis._timezone = timezoneId\n\t\t\tthis._initialized = true\n\t\t} else if (timezoneId instanceof ICAL.Component) {\n\t\t\tthis._timezone = new ICAL.Timezone(timezoneId)\n\t\t\tthis._initialized = true\n\t\t} else {\n\t\t\tthis._timezoneId = timezoneId\n\t\t\tthis._ics = ics!\n\t\t\tthis._initialized = false\n\t\t}\n\t}\n\n\t/**\n\t * Get the timezone id\n\t */\n\tget timezoneId(): string {\n\t\tif (this._initialized) {\n\t\t\treturn this._timezone!.tzid\n\t\t}\n\n\t\t// it is defined as in the constructor the only why `initialized` is not set is when timezone is a string.\n\t\treturn this._timezoneId!\n\t}\n\n\t/**\n\t * Get the UTC Offset for a given date in this timezone.\n\t *\n\t * @param year - Year of the date\n\t * @param month - Month of the date (1-based)\n\t * @param day - Day of the date\n\t * @param hour - Hour of the date\n\t * @param minute - Minute of the date\n\t * @param second - Second of the date\n\t */\n\toffsetForArray(year: number, month: number, day?: number, hour?: number, minute?: number, second?: number): number {\n\t\t/// @ts-expect-error Wrong typings the timezone parameter is optional\n\t\tconst time = new ICAL.Time({\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\thour,\n\t\t\tminute,\n\t\t\tsecond,\n\t\t\tisDate: false,\n\t\t})\n\t\treturn this.timezone.utcOffset(time)\n\t}\n\n\t/**\n\t * Converts a timestamp to an array of year, month, day, hour, minute, second.\n\t *\n\t * @param {number} ms Timestamp in milliseconds\n\t * @return {number[]}\n\t */\n\ttimestampToArray(ms: number): number[] {\n\t\t// just create a dummy object because fromUnixTime is not exposed on ICAL.Time\n\t\tconst time = ICAL.Time.fromData({\n\t\t\tyear: 1970,\n\t\t\tmonth: 1,\n\t\t\tday: 1,\n\t\t\thour: 0,\n\t\t\tminute: 0,\n\t\t\tsecond: 0,\n\t\t})\n\t\ttime.fromUnixTime(Math.floor(ms / 1000))\n\n\t\tconst local = time.convertToZone(this.timezone)\n\t\treturn [\n\t\t\tlocal.year,\n\t\t\tlocal.month, // THIS is 1-based !\n\t\t\tlocal.day,\n\t\t\tlocal.hour,\n\t\t\tlocal.minute,\n\t\t\tlocal.second,\n\t\t]\n\t}\n\n\ttoICALTimezone(): ICAL.Timezone {\n\t\treturn this.timezone\n\t}\n\n\t/**\n\t * Returns the corresponding ICAL.\n\t */\n\ttoICALJs(): ICAL.Component {\n\t\treturn this.timezone.component\n\t}\n\n\t/**\n\t * Initializes the inner ICAL.Timezone component if not already done.\n\t */\n\tprivate get timezone(): ICAL.Timezone {\n\t\tif (!this._initialized) {\n\t\t\tconst jCal = ICAL.parse(this._ics!)\n\t\t\tconst iCalComponent = new ICAL.Component(jCal)\n\t\t\tthis._timezone = new ICAL.Timezone(iCalComponent)\n\t\t\tthis._initialized = true\n\t\t}\n\t\treturn this._timezone!\n\t}\n\n\tpublic static get utc() {\n\t\treturn new Timezone(ICAL.Timezone.utcTimezone)\n\t}\n\n\tpublic static get floating() {\n\t\treturn new Timezone(ICAL.Timezone.localTimezone)\n\t}\n\n}\n","/**\n * SPDX-FileCopyrightText: 2019-2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport ICAL from 'ical.js'\nimport { Timezone } from './timezone.ts'\nimport tzData from '../resources/timezones/zones.json' with { type: 'json' }\n\nexport class TimezoneManager {\n\n\t/**\n\t * Map of aliases\n\t * Alias name => timezoneId\n\t */\n\tprivate _aliases = new Map<string, string>()\n\n\t/**\n\t * Map of Timezones\n\t * timezoneId => Timezone\n\t */\n\tprivate _timezones = new Map<string, Timezone>()\n\n\t/**\n\t * List of aliases that were registered while their targets were missing\n\t * [[aliasName, timezoneId], ...]\n\t */\n\tprivate _pendingAliases: [string, string][] = []\n\n\t/**\n\t * Gets a timezone for the given id.\n\t *\n\t * @param timezoneId - The id of the timezone\n\t */\n\tpublic getTimezoneForId(timezoneId: string): Timezone | null {\n\t\tlet level = 0\n\t\twhile (level++ < 20) {\n\t\t\tif (this._timezones.has(timezoneId)) {\n\t\t\t\treturn this._timezones.get(timezoneId)\n\t\t\t}\n\n\t\t\tif (this._aliases.has(timezoneId)) {\n\t\t\t\ttimezoneId = this._aliases.get(timezoneId)\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t}\n\n\t\tconsole.error('TimezoneManager.getTimezoneForIdRec() exceeds recursion limits')\n\t\treturn null\n\t}\n\n\t/**\n\t * Checks if there is a timezone for the given id stored in this manager.\n\t *\n\t * @param timezoneId - The id of the timezone\n\t */\n\thasTimezoneForId(timezoneId: string): boolean {\n\t\treturn this._timezones.has(timezoneId) || this._aliases.has(timezoneId)\n\t}\n\n\t/**\n\t * Checks if the given timezone id is an alias.\n\t *\n\t * @param timezoneId - The id of the timezone\n\t */\n\tisAlias(timezoneId: string): boolean {\n\t\treturn !this._timezones.has(timezoneId) && this._aliases.has(timezoneId)\n\t}\n\n\t/**\n\t * Lists all timezones.\n\t *\n\t * @param includeAliases - Whether or not to include aliases\n\t */\n\tlistAllTimezones(includeAliases = false): string[] {\n\t\tconst timezones = Array.from(this._timezones.keys())\n\n\t\tif (includeAliases) {\n\t\t\treturn timezones.concat(Array.from(this._aliases.keys()))\n\t\t}\n\n\t\treturn timezones\n\t}\n\n\t/**\n\t * Registers a timezone\n\t *\n\t * @param timezone - The timezone-object to register\n\t */\n\tregisterTimezone(timezone: Timezone): void {\n\t\tthis._timezones.set(timezone.timezoneId, timezone)\n\t\tICAL.TimezoneService.register(timezone.toICALTimezone(), timezone.timezoneId)\n\n\t\t// Try to resolve pending aliases and remove them from the list\n\t\tthis._pendingAliases = this._pendingAliases.filter(([aliasName, timezoneId]) => {\n\t\t\tif (timezoneId !== timezone.timezoneId) {\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tICAL.TimezoneService.register(timezone.toICALTimezone(), aliasName)\n\t\t\treturn false\n\t\t})\n\t}\n\n\tregisterDefaultTimezones(): void {\n\t\tconsole.debug(`@nextcloud/calendar-js app is using version ${tzData.version} of the timezone database`)\n\n\t\tfor (const tzid in tzData.zones) {\n\t\t\tconst ics = [\n\t\t\t\t'BEGIN:VTIMEZONE',\n\t\t\t\t'TZID:' + tzid,\n\t\t\t\t...tzData.zones[tzid].ics,\n\t\t\t\t'END:VTIMEZONE',\n\t\t\t].join('\\r\\n')\n\t\t\tthis.registerTimezoneFromICS(tzid, ics)\n\t\t}\n\n\t\tfor (const tzid in tzData.aliases) {\n\t\t\tthis.registerAlias(tzid, tzData.aliases[tzid].aliasTo)\n\t\t}\n\t}\n\n\t/**\n\t * Registers a timezone based on ics data.\n\t *\n\t * @param timezoneId - The id of the timezone\n\t * @param ics - The iCalendar timezone definition\n\t */\n\tregisterTimezoneFromICS(timezoneId: string, ics: string): void {\n\t\tconst timezone = new Timezone(timezoneId, ics)\n\t\tthis.registerTimezone(timezone)\n\t}\n\n\t/**\n\t * Registers a new timezone-alias\n\t *\n\t * @param aliasName - The timezone-id of the alias\n\t * @param timezoneId - The timezone-id to resolve the alias to\n\t */\n\tregisterAlias(aliasName: string, timezoneId: string): void {\n\t\tthis._aliases.set(aliasName, timezoneId)\n\n\t\tconst resolvedTimezone = this.getTimezoneForId(timezoneId)\n\t\tif (!resolvedTimezone) {\n\t\t\tthis._pendingAliases.push([aliasName, timezoneId])\n\t\t\treturn\n\t\t}\n\t\tICAL.TimezoneService.register(resolvedTimezone.toICALTimezone(), aliasName)\n\t}\n\n\t/**\n\t * Unregisters a timezone.\n\t *\n\t * @param timezoneId - Unregisters a timezone by Id\n\t */\n\tunregisterTimezones(timezoneId: string): void {\n\t\tthis._timezones.delete(timezoneId)\n\t\tICAL.TimezoneService.remove(timezoneId)\n\t}\n\n\t/**\n\t * Unregisters a timezone-alias.\n\t *\n\t * @param aliasName - The alias to unregister\n\t */\n\tunregisterAlias(aliasName: string): void {\n\t\tthis._aliases.delete(aliasName)\n\t\tthis._pendingAliases = this._pendingAliases\n\t\t\t.filter(([pendingAliasName]) => pendingAliasName !== aliasName)\n\t\tICAL.TimezoneService.remove(aliasName)\n\t}\n\n\t/**\n\t * Clear all timezones\n\t */\n\tclearAllTimezones() {\n\t\tthis._aliases = new Map()\n\t\tthis._pendingAliases = []\n\t\tthis._timezones = new Map()\n\n\t\tICAL.TimezoneService.reset()\n\n\t\ttimezoneManager.registerTimezone(Timezone.utc)\n\t\ttimezoneManager.registerTimezone(Timezone.floating)\n\t\ttimezoneManager.registerAlias('GMT', Timezone.utc.timezoneId)\n\t\ttimezoneManager.registerAlias('Z', Timezone.utc.timezoneId)\n\t}\n\n}\n\nconst timezoneManager = new TimezoneManager()\ntimezoneManager.clearAllTimezones()\n\n/**\n * Gets the default instance of the timezone manager\n */\nexport function getTimezoneManager(): TimezoneManager {\n\treturn timezoneManager\n}\n"],"names":["ICAL"],"mappings":";;;;;AA2BgB,SAAA,sBACf,eAAyB,CAAC,GAC1B,sBAAmC,CAAC,GACpC,qBAAqB,UACN;AACT,QAAA,wCAAwB;AAC9B,aAAW,cAAc,cAAc;AAChC,UAAA,aAAa,WAAW,MAAM,GAAG;AACnC,QAAA,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,MAAU,GAAA,WAAW,KAAK,GAAG,CAAC;AAClE,QAAI,CAAC,MAAM;AACH,aAAA;AACK,kBAAA;AAAA,IACb;AAEA,QAAI,CAAC,kBAAkB,IAAI,SAAS,GAAG;AACtC,wBAAkB,IAAI,WAAW;AAAA,QAChC;AAAA,QACA,SAAS,CAAC;AAAA,MAAA,CACV;AAAA,IACF;AAEA,sBAAkB,IAAI,SAAS,EAAG,QAAQ,KAAK;AAAA,MAC9C,OAAO,wBAAwB,IAAI;AAAA,MACnC,QAAQ,CAAC;AAAA,MACT;AAAA,IAAA,CACA;AAAA,EACF;AAEA,aAAW,EAAE,WAAW,OAAO,WAAA,KAAgB,qBAAqB;AACnE,QAAI,CAAC,kBAAkB,IAAI,SAAS,GAAG;AACtC,wBAAkB,IAAI,WAAW;AAAA,QAChC;AAAA,QACA,SAAS,CAAC;AAAA,MAAA,CACV;AAAA,IACF;AAEA,sBAAkB,IAAI,SAAS,EAAG,QAAQ,KAAK;AAAA,MAC9C;AAAA,MACA,QAAQ,CAAC;AAAA,MACT;AAAA,IAAA,CACA;AAAA,EACF;AAGA,QAAM,aAAa,CAAC,GAAG,kBAAkB,OAAQ,CAAA,EAC/C,KAAK,CAAC,GAAG,MAAM,EAAE,UAAU,cAAc,EAAE,SAAS,CAAC;AAE5C,aAAA,EAAE,QAAQ,KAAK,YAAY;AAC7B,YAAA,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,cAAc,EAAE,KAAK,CAAC;AAAA,EACtD;AAEO,SAAA;AACR;AAOO,SAAS,wBAAwB,YAA4B;AACnE,SAAO,WACL,MAAM,GAAG,EACT,KAAK,GAAG,EACR,QAAQ,OAAO,MAAM,EACrB,MAAM,GAAG,EACT,KAAK,KAAK;AACb;AAKO,SAAS,gBAAgB,QAAyB;AAClD,QAAA,WAAW,OAAO,SAAS,GAAG;AAC9B,QAAA,WAAW,OAAO,SAAS,GAAG;AAC9B,QAAA,gBAAgB,OAAO,WAAW,KAAK;AACvC,QAAA,eAAe,OAAO,WAAW,KAAK;AAE5C,SAAO,YAAY,CAAC,YAAY,CAAC,iBAAiB,CAAC;AACpD;AClGO,MAAM,SAAS;AAAA;AAAA;AAAA;AAAA,EAKb;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,EAEA;AAAA,EAEA;AAAA,EAUR,YAAY,YAAqD,KAAc;AAI1E,QAAA,sBAAsBA,sBAAK,UAAU;AACxC,WAAK,YAAY;AACjB,WAAK,eAAe;AAAA,IAAA,WACV,sBAAsBA,cAAA,QAAK,WAAW;AAChD,WAAK,YAAY,IAAIA,cAAK,QAAA,SAAS,UAAU;AAC7C,WAAK,eAAe;AAAA,IAAA,OACd;AACN,WAAK,cAAc;AACnB,WAAK,OAAO;AACZ,WAAK,eAAe;AAAA,IACrB;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAAqB;AACxB,QAAI,KAAK,cAAc;AACtB,aAAO,KAAK,UAAW;AAAA,IACxB;AAGA,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,eAAe,MAAc,OAAe,KAAc,MAAe,QAAiB,QAAyB;AAE5G,UAAA,OAAO,IAAIA,cAAA,QAAK,KAAK;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,IAAA,CACR;AACM,WAAA,KAAK,SAAS,UAAU,IAAI;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,IAAsB;AAEhC,UAAA,OAAOA,cAAAA,QAAK,KAAK,SAAS;AAAA,MAC/B,MAAM;AAAA,MACN,OAAO;AAAA,MACP,KAAK;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,IAAA,CACR;AACD,SAAK,aAAa,KAAK,MAAM,KAAK,GAAI,CAAC;AAEvC,UAAM,QAAQ,KAAK,cAAc,KAAK,QAAQ;AACvC,WAAA;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,IAAA;AAAA,EAER;AAAA,EAEA,iBAAgC;AAC/B,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAKA,WAA2B;AAC1B,WAAO,KAAK,SAAS;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAY,WAA0B;AACjC,QAAA,CAAC,KAAK,cAAc;AACvB,YAAM,OAAOA,cAAA,QAAK,MAAM,KAAK,IAAK;AAClC,YAAM,gBAAgB,IAAIA,cAAAA,QAAK,UAAU,IAAI;AAC7C,WAAK,YAAY,IAAIA,cAAK,QAAA,SAAS,aAAa;AAChD,WAAK,eAAe;AAAA,IACrB;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,WAAkB,MAAM;AACvB,WAAO,IAAI,SAASA,cAAAA,QAAK,SAAS,WAAW;AAAA,EAC9C;AAAA,EAEA,WAAkB,WAAW;AAC5B,WAAO,IAAI,SAASA,cAAAA,QAAK,SAAS,aAAa;AAAA,EAChxIO,MAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpB,+BAAe;;;;;EAMf,iCAAiB;;;;;EAMjB,kBAAsC,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOvC,iBAAiB,YAAqC;AAC5D,QAAI,QAAQ;AACZ,WAAO,UAAU,IAAI;AACpB,UAAI,KAAK,WAAW,IAAI,UAAU,GAAG;AAC7B,eAAA,KAAK,WAAW,IAAI,UAAU;AAAA,MACtC;AAEA,UAAI,KAAK,SAAS,IAAI,UAAU,GAAG;AACrB,qBAAA,KAAK,SAAS,IAAI,UAAU;AAAA,MAAA,OACnC;AACC,eAAA;AAAA,MACR;AAAA,IACD;AAEA,YAAQ,MAAM,gEAAgE;AACvE,WAAA;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,YAA6B;AACtC,WAAA,KAAK,WAAW,IAAI,UAAU,KAAK,KAAK,SAAS,IAAI,UAAU;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,YAA6B;AAC7B,WAAA,CAAC,KAAK,WAAW,IAAI,UAAU,KAAK,KAAK,SAAS,IAAI,UAAU;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,iBAAiB,OAAiB;AAClD,UAAM,YAAY,MAAM,KAAK,KAAK,WAAW,MAAM;AAEnD,QAAI,gBAAgB;AACZ,aAAA,UAAU,OAAO,MAAM,KAAK,KAAK,SAAS,KAAM,CAAA,CAAC;AAAA,IACzD;AAEO,WAAA;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,UAA0B;AAC1C,SAAK,WAAW,IAAI,SAAS,YAAY,QAAQ;AACjDA,kBAAA,QAAK,gBAAgB,SAAS,SAAS,kBAAkB,SAAS,UAAU;AAGvE,SAAA,kBAAkB,KAAK,gBAAgB,OAAO,CAAC,CAAC,WAAW,UAAU,MAAM;AAC3E,UAAA,eAAe,SAAS,YAAY;AAChC,eAAA;AAAA,MACR;AAEAA,oBAAA,QAAK,gBAAgB,SAAS,SAAS,eAAA,GAAkB,SAAS;AAC3D,aAAA;AAAA,IAAA,CACP;AAAA,EACF;AAAA,EAEA,2BAAiC;AAChC,YAAQ,MAAM,+CAA+C,OAAO,OAAO,2BAA2B;AAE3F,eAAA,QAAQ,OAAO,OAAO;AAChC,YAAM,MAAM;AAAA,QACX;AAAA,QACA,UAAU;AAAA,QACV,GAAG,OAAO,MAAM,IAAI,EAAE;AAAA,QACtB;AAAA,MAAA,EACC,KAAK,MAAM;AACR,WAAA,wBAAwB,MAAM,GAAG;AAAA,IACvC;AAEW,eAAA,QAAQ,OAAO,SAAS;AAClC,WAAK,cAAc,MAAM,OAAO,QAAQ,IAAI,EAAE,OAAO;AAAA,IACtD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,wBAAwB,YAAoB,KAAmB;AAC9D,UAAM,WAAW,IAAI,SAAS,YAAY,GAAG;AAC7C,SAAK,iBAAiB,QAAQ;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,WAAmB,YAA0B;AACrD,SAAA,SAAS,IAAI,WAAW,UAAU;AAEjC,UAAA,mBAAmB,KAAK,iBAAiB,UAAU;AACzD,QAAI,CAAC,kBAAkB;AACtB,WAAK,gBAAgB,KAAK,CAAC,WAAW,UAAU,CAAC;AACjD;AAAA,IACD;AACAA,kBAAA,QAAK,gBAAgB,SAAS,iBAAiB,eAAA,GAAkB,SAAS;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAoB,YAA0B;AACxC,SAAA,WAAW,OAAO,UAAU;AAC5BA,kBAAAA,QAAA,gBAAgB,OAAO,UAAU;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,WAAyB;AACnC,SAAA,SAAS,OAAO,SAAS;AACzB,SAAA,kBAAkB,KAAK,gBAC1B,OAAO,CAAC,CAAC,gBAAgB,MAAM,qBAAqB,SAAS;AAC1DA,kBAAAA,QAAA,gBAAgB,OAAO,SAAS;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB;AACd,SAAA,+BAAe;AACpB,SAAK,kBAAkB;AAClB,SAAA,iCAAiB;AAEtBA,0BAAK,gBAAgB;AAEL,oBAAA,iBAAiB,SAAS,GAAG;AAC7B,oBAAA,iBAAiB,SAAS,QAAQ;AAClD,oBAAgB,cAAc,OAAO,SAAS,IAAI,UAAU;AAC5D,oBAAgB,cAAc,KAAK,SAAS,IAAI,UAAU;AAAA,EAC3D;AAED;AAEA,MAAM,kBAAkB,IAAI;AAC5B,gBAAgB,kBAAkB;AAK3B,SAAS,qBAAsC;AAC9C,SAAA;AACR;;;;;;"}