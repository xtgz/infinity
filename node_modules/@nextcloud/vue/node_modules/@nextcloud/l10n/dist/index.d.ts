declare interface AppTranslations {
    translations: Translations;
    pluralFunction: PluralFunction;
}

/**
 * Extracts variables from a translation key
 */
declare type ExtractedVariables<T extends string> = T extends `${string}{${infer Variable}}${infer Rest}` ? Variable | ExtractedVariables<Rest> : never;

/**
 * Returns user's locale in canonical form
 * E.g. `en-US` instead of `en_US`
 */
export declare function getCanonicalLocale(): string;

/**
 * Get a list of day names (full names)
 *
 * @return {string[]}
 */
export declare function getDayNames(): string[];

/**
 * Get a list of day names (minified names)
 *
 * @return {string[]}
 */
export declare function getDayNamesMin(): string[];

/**
 * Get a list of day names (short names)
 *
 * @return {string[]}
 */
export declare function getDayNamesShort(): string[];

/**
 * Get the first day of the week
 *
 * @return The first day where 0 is Sunday, 1 is Monday etc.
 */
export declare function getFirstDay(): WeekDay;

/**
 * Returns the user's language
 */
export declare function getLanguage(): string;

/**
 * Returns the user's locale
 */
export declare function getLocale(): string;

/**
 * Get a list of month names (full names)
 *
 * @return {string[]}
 */
export declare function getMonthNames(): string[];

/**
 * Get a list of month names (short names)
 *
 * @return {string[]}
 */
export declare function getMonthNamesShort(): string[];

/**
 * Get array index of translations for a plural form
 *
 *
 * @param {number} number the number of elements
 * @param {string|undefined} language the language to use (or autodetect if not set)
 * @return {number} 0 for the singular form(, 1 for the first plural form, ...)
 */
export declare function getPlural(number: number, language?: string): 0 | 1 | 2 | 3 | 4 | 5;

/**
 * Check whether the current, or a given, language is read right-to-left
 *
 * @param language Language code to check, defaults to current language
 */
export declare function isRTL(language?: string): boolean;

/**
 * Load an app's translation bundle if not loaded already.
 *
 * @param {string} appName name of the app
 * @param {Function} callback callback to be called when
 * the translations are loaded
 * @return {Promise} promise
 */
export declare function loadTranslations(appName: string, callback: (...args: []) => unknown): Promise<unknown>;

/**
 * Function for getting plural form index from translated number
 *
 * @param number Input number to translate
 * @return Index of translation plural form
 * @example For most languages, like English or German
 * ```js
 (number:number) => number === 1 ? 0 : 1
 ```
 */
declare type PluralFunction = (number: number) => number;

/**
 * Register an app's translation bundle.
 *
 * @param {string} appName name of the app
 * @param {Record<string, string>} bundle translation bundle
 */
export declare function register(appName: string, bundle: Translations): void;

declare function translate<T extends string>(app: string, text: T, placeholders?: TranslationVariables<T>, options?: TranslationOptions): string;

declare function translate<T extends string>(app: string, text: T, number?: number, options?: TranslationOptions): string;

/**
 * @inheritdoc
 * @deprecated This overload is deprecated either use placeholders or a number but not both
 */
declare function translate<T extends string>(app: string, text: T, placeholders?: TranslationVariables<T>, number?: number, options?: TranslationOptions): string;
export { translate as t }
export { translate }

/**
 * Translate a string containing an object which possibly requires a plural form
 *
 * @param {string} app the id of the app for which to translate the string
 * @param {string} textSingular the string to translate for exactly one object
 * @param {string} textPlural the string to translate for n objects
 * @param {number} number number to determine whether to use singular or plural
 * @param {object} vars of placeholder key to value
 * @param {object} options options object
 */
declare function translatePlural<T extends string, K extends string>(app: string, textSingular: T, textPlural: K, number: number, vars?: TranslationVariables<T> & TranslationVariables<K>, options?: TranslationOptions): string;
export { translatePlural as n }
export { translatePlural }

declare interface TranslationOptions {
    /** enable/disable auto escape of placeholders (by default enabled) */
    escape?: boolean;
    /** enable/disable sanitization (by default enabled) */
    sanitize?: boolean;
    /**
     * This is only intended for internal usage.
     * @private
     */
    bundle?: AppTranslations;
}

/**
 * Translation bundle
 *
 * @example For German translation
 * ```json
 {
 "some": "einige",
 "_%n tree_::_%n trees_": [
 "%n Baum",
 "%n BÃ¤ume"
 ]
 }
 ```
 */
export declare type Translations = Record<string, string | string[] | undefined>;

declare interface TranslationVariableReplacementObject<T> {
    /** The value to use for the replacement */
    value: T;
    /** Overwrite the `escape` option just for this replacement */
    escape: boolean;
}

declare type TranslationVariables<K extends string> = Record<ExtractedVariables<K>, string | number | TranslationVariableReplacementObject<string | number>>;

/**
 * Unregister all translations of an app
 *
 * @param appName name of the app
 * @since 2.1.0
 */
export declare function unregister(appName: string): void;

export declare type WeekDay = 0 | 1 | 2 | 3 | 4 | 5 | 6;

export { }
