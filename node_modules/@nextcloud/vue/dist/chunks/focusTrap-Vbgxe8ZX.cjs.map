{"version":3,"file":"focusTrap-Vbgxe8ZX.cjs","sources":["../../src/utils/focusTrap.ts"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport type { FocusTrap } from 'focus-trap'\n\ndeclare global {\n\tinterface Window {\n\t\t_nc_focus_trap: FocusTrap[]\n\t}\n}\n\n/**\n * Get the default global focus trap stack\n */\nexport function getTrapStack() {\n\t// Create global stack if undefined\n\twindow._nc_focus_trap ??= []\n\n\treturn window._nc_focus_trap\n}\n\n/**\n * Create controller to pause/unpause the global focus trap stack.\n *\n * When some component manually implements its own focus-trap without using global focus-trap stack,\n * it also needs to pause the global stack to avoid conflict.\n */\nexport function createTrapStackController() {\n\t/**\n\t * Stack of focus traps that were paused to unpause the exact stack later\n\t */\n\tlet pausedStack: FocusTrap[] = []\n\n\treturn {\n\t\t/**\n\t\t * Pause the current focus-trap stack\n\t\t */\n\t\tpause() {\n\t\t\tpausedStack = [...getTrapStack()]\n\t\t\tfor (const trap of pausedStack) {\n\t\t\t\ttrap.pause()\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Unpause the paused focus trap stack\n\t\t */\n\t\tunpause() {\n\t\t\tfor (const trap of pausedStack) {\n\t\t\t\ttrap.unpause()\n\t\t\t}\n\t\t\tpausedStack = []\n\t\t},\n\t}\n}\n"],"names":[],"mappings":";AAgBO,SAAS,eAAe;AAE9B,SAAO,mBAAmB,CAAC;AAE3B,SAAO,OAAO;AACf;AAQO,SAAS,4BAA4B;AAI3C,MAAI,cAA2B,CAAC;AAEzB,SAAA;AAAA;AAAA;AAAA;AAAA,IAIN,QAAQ;AACO,oBAAA,CAAC,GAAG,cAAc;AAChC,iBAAW,QAAQ,aAAa;AAC/B,aAAK,MAAM;AAAA,MAAA;AAAA,IAEb;AAAA;AAAA;AAAA;AAAA,IAIA,UAAU;AACT,iBAAW,QAAQ,aAAa;AAC/B,aAAK,QAAQ;AAAA,MAAA;AAEd,oBAAc,CAAC;AAAA,IAAA;AAAA,EAEjB;AACD;;;"}