{"version":3,"file":"useTrapStackControl-b3A_383w.mjs","sources":["../../src/composables/useTrapStackControl.ts"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2025 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport type { Ref } from 'vue'\nimport type { MaybeRefOrGetter } from '@vueuse/core'\nimport { onUnmounted, watch } from 'vue'\nimport { toValue } from '@vueuse/core'\nimport { createTrapStackController } from '../utils/focusTrap.ts'\n\n/**\n * Control global focus trap stack when focus trap is managed manually\n *\n * @param shouldPause - Whether focus trap should be paused\n * @param options - Additional options\n * @param options.disabled - Whether the controller should be disabled\n */\nexport function useTrapStackControl(shouldPause: Ref<boolean> | (() => boolean), options: { disabled?: MaybeRefOrGetter<boolean> } = {}) {\n\tconst trapStackController = createTrapStackController()\n\n\twatch(shouldPause, () => {\n\t\tif (toValue(options.disabled)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (toValue(shouldPause)) {\n\t\t\ttrapStackController.pause()\n\t\t} else {\n\t\t\ttrapStackController.unpause()\n\t\t}\n\t})\n\n\tonUnmounted(() => {\n\t\ttrapStackController.unpause()\n\t})\n}\n"],"names":[],"mappings":";;;AAkBO,SAAS,oBAAoB,aAA6C,UAAoD,IAAI;AACxI,QAAM,sBAAsB,0BAA0B;AAEtD,QAAM,aAAa,MAAM;AACpB,QAAA,QAAQ,QAAQ,QAAQ,GAAG;AAC9B;AAAA,IAAA;AAGG,QAAA,QAAQ,WAAW,GAAG;AACzB,0BAAoB,MAAM;AAAA,IAAA,OACpB;AACN,0BAAoB,QAAQ;AAAA,IAAA;AAAA,EAC7B,CACA;AAED,cAAY,MAAM;AACjB,wBAAoB,QAAQ;AAAA,EAAA,CAC5B;AACF;"}