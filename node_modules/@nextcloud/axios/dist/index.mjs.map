{"version":3,"file":"index.mjs","sources":["../lib/interceptors/csrf-token.ts","../lib/interceptors/maintenance-mode.ts","../lib/interceptors/not-logged-in.ts","../lib/index.ts"],"sourcesContent":["import { generateUrl } from '@nextcloud/router'\n\nconst RETRY_KEY = Symbol('csrf-retry')\n\nexport const onError = axios => async (error) => {\n\tconst { config, response, request } = error\n\tconst responseURL = request?.responseURL\n\tconst status = response?.status\n\n\tif (status === 412\n\t\t&& response?.data?.message === 'CSRF check failed'\n\t\t&& config[RETRY_KEY] === undefined) {\n\t\tconsole.warn(`Request to ${responseURL} failed because of a CSRF mismatch. Fetching a new token`)\n\n\t\tconst { data: { token } } = await axios.get(generateUrl('/csrftoken'))\n\t\tconsole.debug(`New request token ${token} fetched`)\n\t\taxios.defaults.headers.requesttoken = token\n\n\t\treturn axios({\n\t\t\t...config,\n\t\t\theaders: {\n\t\t\t\t...config.headers,\n\t\t\t\trequesttoken: token,\n\t\t\t},\n\t\t\t[RETRY_KEY]: true,\n\t\t})\n\t}\n\n\treturn Promise.reject(error)\n}\n","const RETRY_DELAY_KEY = Symbol('retryDelay')\n\nexport const onError = axios => async (error) => {\n\tconst { config, response, request } = error\n\tconst responseURL = request?.responseURL\n\tconst status = response?.status\n\tconst headers = response?.headers\n\n\t/**\n\t * Retry requests if they failed due to maintenance mode\n\t *\n\t * The delay is exponential. It starts at 2s and then doubles\n\t * until a final retry after 32s. This results in roughly 1m of\n\t * retries until we give up and throw the axios error towards\n\t * the caller.\n\t */\n\tif (status === 503\n\t\t&& headers['x-nextcloud-maintenance-mode'] === '1'\n\t\t&& config.retryIfMaintenanceMode\n\t\t&& (!config[RETRY_DELAY_KEY] || config[RETRY_DELAY_KEY] <= 32)) {\n\t\tconst retryDelay = (config[RETRY_DELAY_KEY] ?? 1) * 2\n\t\tconsole.warn(`Request to ${responseURL} failed because of maintenance mode. Retrying in ${retryDelay}s`)\n\t\tawait new Promise((resolve) => {\n\t\t\tsetTimeout(resolve, retryDelay * 1000)\n\t\t})\n\n\t\treturn axios({\n\t\t\t...config,\n\t\t\t[RETRY_DELAY_KEY]: retryDelay,\n\t\t})\n\t}\n\n\treturn Promise.reject(error)\n}\n","export const onError = async (error) => {\n\tconst { config, response, request } = error\n\tconst responseURL = request?.responseURL\n\tconst status = response?.status\n\n\tif (status === 401\n\t\t&& response?.data?.message === 'Current user is not logged in'\n\t\t&& config.reloadExpiredSession\n\t\t&& window?.location) {\n\t\tconsole.error(`Request to ${responseURL} failed because the user session expired. Reloading the page â€¦`)\n\n\t\twindow.location.reload()\n\t}\n\n\treturn Promise.reject(error)\n}\n","import Axios, { AxiosInstance, CancelTokenStatic } from 'axios'\nimport { getRequestToken, onRequestTokenUpdate } from '@nextcloud/auth'\n\nimport { onError as onCsrfTokenError } from './interceptors/csrf-token'\nimport { onError as onMaintenanceModeError } from './interceptors/maintenance-mode'\nimport { onError as onNotLoggedInError } from './interceptors/not-logged-in'\n\ninterface CancelableAxiosInstance extends AxiosInstance {\n\tCancelToken: CancelTokenStatic\n\tisCancel: typeof Axios.isCancel\n}\n\nconst client = Axios.create({\n\theaders: {\n\t\trequesttoken: getRequestToken() ?? '',\n\t\t'X-Requested-With': 'XMLHttpRequest',\n\t},\n})\n\nconst cancelableClient: CancelableAxiosInstance = Object.assign(client, {\n\tCancelToken: Axios.CancelToken,\n\tisCancel: Axios.isCancel,\n})\n\ncancelableClient.interceptors.response.use(r => r, onCsrfTokenError(cancelableClient))\ncancelableClient.interceptors.response.use(r => r, onMaintenanceModeError(cancelableClient))\ncancelableClient.interceptors.response.use(r => r, onNotLoggedInError)\n\nonRequestTokenUpdate(token => { client.defaults.headers.requesttoken = token })\n\nexport default cancelableClient\n\nexport { isAxiosError, isCancel } from 'axios'\n\nexport type * from 'axios'\n"],"names":["onError","_a","onCsrfTokenError","onMaintenanceModeError","onNotLoggedInError"],"mappings":"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"}