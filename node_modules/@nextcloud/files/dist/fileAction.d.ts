import { Node } from './files/node';
import { View } from './navigation/view';
export declare enum DefaultType {
    DEFAULT = "default",
    HIDDEN = "hidden"
}
export interface FileActionData {
    /** Unique ID */
    id: string;
    /** Translatable string displayed in the menu */
    displayName: (files: Node[], view: View) => string;
    /** Translatable title for of the action */
    title?: (files: Node[], view: View) => string;
    /** Svg as inline string. <svg><path fill="..." /></svg> */
    iconSvgInline: (files: Node[], view: View) => string;
    /** Condition wether this action is shown or not */
    enabled?: (files: Node[], view: View) => boolean;
    /**
     * Function executed on single file action
     * @return true if the action was executed successfully,
     * false otherwise and null if the action is silent/undefined.
     * @throws Error if the action failed
     */
    exec: (file: Node, view: View, dir: string) => Promise<boolean | null>;
    /**
     * Function executed on multiple files action
     * @return true if the action was executed successfully,
     * false otherwise and null if the action is silent/undefined.
     * @throws Error if the action failed
     */
    execBatch?: (files: Node[], view: View, dir: string) => Promise<(boolean | null)[]>;
    /** This action order in the list */
    order?: number;
    /**
     * Set to true if this action is a destructive action, like "delete".
     * This will change the appearance in the action menu more prominent (e.g. red colored)
     */
    destructive?: boolean;
    /**
     * This action's parent id in the list.
     * If none found, will be displayed as a top-level action.
     */
    parent?: string;
    /**
     * Make this action the default.
     * If multiple actions are default, the first one
     * will be used. The other ones will be put as first
     * entries in the actions menu iff DefaultType.Hidden is not used.
     * A DefaultType.Hidden action will never be shown
     * in the actions menu even if another action takes
     * its place as default.
     */
    default?: DefaultType;
    /**
     * If true, the renderInline function will be called
     */
    inline?: (file: Node, view: View) => boolean;
    /**
     * If defined, the returned html element will be
     * appended before the actions menu.
     */
    renderInline?: (file: Node, view: View) => Promise<HTMLElement | null>;
}
export declare class FileAction {
    private _action;
    constructor(action: FileActionData);
    get id(): string;
    get displayName(): (files: Node[], view: View) => string;
    get title(): ((files: Node[], view: View) => string) | undefined;
    get iconSvgInline(): (files: Node[], view: View) => string;
    get enabled(): ((files: Node[], view: View) => boolean) | undefined;
    get exec(): (file: Node, view: View, dir: string) => Promise<boolean | null>;
    get execBatch(): ((files: Node[], view: View, dir: string) => Promise<(boolean | null)[]>) | undefined;
    get order(): number | undefined;
    get parent(): string | undefined;
    get default(): DefaultType | undefined;
    get destructive(): boolean | undefined;
    get inline(): ((file: Node, view: View) => boolean) | undefined;
    get renderInline(): ((file: Node, view: View) => Promise<HTMLElement | null>) | undefined;
    private validateAction;
}
export declare const registerFileAction: (action: FileAction) => void;
export declare const getFileActions: () => FileAction[];
