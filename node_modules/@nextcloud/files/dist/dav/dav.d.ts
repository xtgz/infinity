import { FileStat, WebDAVClient } from 'webdav';
import { Node } from '../files/node';
import { CancelablePromise } from 'cancelable-promise';
/**
 * Get the DAV root path for the current user or public share
 */
export declare function getRootPath(): string;
/**
 * The DAV root path for the current user
 * This is a cached version of `getRemoteURL`
 */
export declare const defaultRootPath: string;
/**
 * Get the DAV remote URL used as base URL for the WebDAV client
 * It also handles public shares
 */
export declare function getRemoteURL(): string;
/**
 * The DAV remote URL used as base URL for the WebDAV client
 * This is a cached version of `getRemoteURL`
 */
export declare const defaultRemoteURL: string;
/**
 * Get a WebDAV client configured to include the Nextcloud request token
 *
 * @param remoteURL The DAV server remote URL
 * @param headers Optional additional headers to set for every request
 */
export declare const getClient: (remoteURL?: string, headers?: Record<string, string>) => WebDAVClient;
/**
 * Use WebDAV to query for favorite Nodes
 *
 * @param davClient The WebDAV client to use for performing the request
 * @param path Base path for the favorites, if unset all favorites are queried
 * @param davRoot The root path for the DAV user (defaults to `defaultRootPath`)
 * @example
 * ```js
 * import { getClient, defaultRootPath, getFavoriteNodes } from '@nextcloud/files'
 *
 * const client = getClient()
 * // query favorites for the root
 * const favorites = await getFavoriteNodes(client)
 * // which is the same as writing:
 * const favorites = await getFavoriteNodes(client, '/', defaultRootPath)
 * ```
 */
export declare const getFavoriteNodes: (davClient: WebDAVClient, path?: string, davRoot?: string) => CancelablePromise<Node[]>;
/**
 * Covert DAV result `FileStat` to `Node`
 *
 * @param node The DAV result
 * @param filesRoot The DAV files root path
 * @param remoteURL The DAV server remote URL (same as on `getClient`)
 */
export declare const resultToNode: (node: FileStat, filesRoot?: string, remoteURL?: string) => Node;
