export type DavProperty = {
    [key: string]: string;
};
export declare const defaultDavProperties: string[];
export declare const defaultDavNamespaces: {
    d: string;
    nc: string;
    oc: string;
    ocs: string;
};
/**
 * Register custom DAV properties
 *
 * Can be used if your app introduces custom DAV properties, so e.g. the files app can make use of it.
 *
 * @param prop The property
 * @param namespace The namespace of the property
 */
export declare const registerDavProperty: (prop: string, namespace?: DavProperty) => boolean;
/**
 * Get the registered dav properties
 */
export declare const getDavProperties: () => string;
/**
 * Get the registered dav namespaces
 */
export declare const getDavNameSpaces: () => string;
/**
 * Get the default PROPFIND request body
 */
export declare const getDefaultPropfind: () => string;
/**
 * Get the REPORT body to filter for favorite nodes
 */
export declare const getFavoritesReport: () => string;
/**
 * Get the SEARCH body to search for recently modified files
 *
 * @param lastModified Oldest timestamp to include (Unix timestamp)
 * @example
 * ```ts
 * // SEARCH for recent files need a different DAV endpoint
 * const client = davGetClient(generateRemoteUrl('dav'))
 * // Timestamp of last week
 * const lastWeek = Math.round(Date.now() / 1000) - (60 * 60 * 24 * 7)
 * const contentsResponse = await client.getDirectoryContents(path, {
 *     details: true,
 *     data: davGetRecentSearch(lastWeek),
 *     headers: {
 *         method: 'SEARCH',
 *         'Content-Type': 'application/xml; charset=utf-8',
 *     },
 *     deep: true,
 * }) as ResponseDataDetailed<FileStat[]>
 * ```
 */
export declare const getRecentSearch: (lastModified: number) => string;
