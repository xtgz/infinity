import { TypedEventTarget } from 'typescript-event-target';
import { INode } from './files/node';
/**
 * Active filters can provide one or more "chips" to show the currently active state.
 * Must at least provide a text representing the filters state and a callback to unset that state (disable this filter).
 */
export interface IFileListFilterChip {
    /**
     * Text of the chip
     */
    text: string;
    /**
     * Optional icon to be used on the chip (inline SVG as string)
     */
    icon?: string;
    /**
     * Optional pass a user id to use a user avatar instead of an icon
     */
    user?: string;
    /**
     * Handler to be called on click
     */
    onclick: () => void;
}
/**
 * This event is emitted when the the filter value changed and the file list needs to be updated
 */
export interface FilterUpdateEvent extends CustomEvent<never> {
    type: 'update:filter';
}
/**
 * This event is emitted when the the filter value changed and the file list needs to be updated
 */
export interface FilterUpdateChipsEvent extends CustomEvent<IFileListFilterChip[]> {
    type: 'update:chips';
}
interface IFileListFilterEvents {
    [name: string]: CustomEvent;
    'update:filter': FilterUpdateEvent;
    'update:chips': FilterUpdateChipsEvent;
}
export interface IFileListFilter extends TypedEventTarget<IFileListFilterEvents> {
    /**
     * Unique ID of this filter
     */
    readonly id: string;
    /**
     * Order of the filter
     *
     * Use a low number to make this filter ordered in front.
     */
    readonly order: number;
    /**
     * Filter function to decide if a node is shown.
     *
     * @param nodes Nodes to filter
     * @return Subset of the `nodes` parameter to show
     */
    filter(nodes: INode[]): INode[];
    /**
     * If the filter needs a visual element for settings it can provide a function to mount it.
     * @param el The DOM element to mount to
     */
    mount?(el: HTMLElement): void;
    /**
     * Reset the filter to the initial state.
     * This is called by the files app.
     * Implementations should make sure,that if they provide chips they need to emit the `update:chips` event.
     *
     * @since 3.10.0
     */
    reset?(): void;
}
export declare class FileListFilter extends TypedEventTarget<IFileListFilterEvents> implements IFileListFilter {
    id: string;
    order: number;
    constructor(id: string, order?: number);
    filter(nodes: INode[]): INode[];
    protected updateChips(chips: IFileListFilterChip[]): void;
    protected filterUpdated(): void;
}
/**
 * Register a new filter on the file list
 *
 * This only must be called once to register the filter,
 * when the filter state changes you need to call `filterUpdated` on the filter instead.
 *
 * @param filter The filter to register on the file list
 */
export declare function registerFileListFilter(filter: IFileListFilter): void;
/**
 * Remove a registered filter from the file list
 * @param filterId The unique ID of the filter to remove
 */
export declare function unregisterFileListFilter(filterId: string): void;
/**
 * Get all registered file list filters
 */
export declare function getFileListFilters(): IFileListFilter[];
export {};
