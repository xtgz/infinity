{"version":3,"file":"index.cjs","sources":["../lib/ProxyBus.ts","../lib/SimpleBus.ts","../lib/index.ts"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: GPL-3.0-or-later\n */\n\nimport valid from 'semver/functions/valid.js'\nimport major from 'semver/functions/major.js'\n\nimport type { GenericEvents, NextcloudEvents } from './Event.js'\nimport type { EventBus } from './EventBus.js'\nimport type { EventHandler } from './EventHandler.js'\nimport type { IsUndefined } from './types.ts'\n\nexport class ProxyBus<E extends GenericEvents = NextcloudEvents>\n\timplements EventBus<E>\n{\n\tprivate bus: EventBus<E>\n\n\tconstructor(bus: EventBus<E>) {\n\t\tif (typeof bus.getVersion !== 'function' || !valid(bus.getVersion())) {\n\t\t\tconsole.warn('Proxying an event bus with an unknown or invalid version')\n\t\t} else if (major(bus.getVersion()) !== major(this.getVersion())) {\n\t\t\tconsole.warn(\n\t\t\t\t'Proxying an event bus of version ' +\n\t\t\t\t\tbus.getVersion() +\n\t\t\t\t\t' with ' +\n\t\t\t\t\tthis.getVersion(),\n\t\t\t)\n\t\t}\n\n\t\tthis.bus = bus\n\t}\n\n\tgetVersion(): string {\n\t\treturn __pkg_version\n\t}\n\n\tsubscribe<EventName extends keyof E>(\n\t\tname: EventName,\n\t\thandler: EventHandler<E[EventName]>,\n\t): void {\n\t\tthis.bus.subscribe(name, handler)\n\t}\n\n\tunsubscribe<EventName extends keyof E>(\n\t\tname: EventName,\n\t\thandler: EventHandler<E[EventName]>,\n\t): void {\n\t\tthis.bus.unsubscribe(name, handler)\n\t}\n\n\temit<EventName extends keyof E>(\n\t\tname: EventName,\n\t\t...event: IsUndefined<E[EventName]> extends true ? [] : [E[EventName]]\n\t): void {\n\t\tthis.bus.emit(name, ...event)\n\t}\n}\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: GPL-3.0-or-later\n */\nimport type { GenericEvents, NextcloudEvents } from './Event.js'\nimport type { EventBus } from './EventBus.js'\nimport type { EventHandler } from './EventHandler.js'\nimport type { IsUndefined } from './types.ts'\n\nexport class SimpleBus<E extends GenericEvents = NextcloudEvents>\n\timplements EventBus<E>\n{\n\tprivate handlers = new Map<keyof E, EventHandler<E[keyof E]>[]>()\n\n\tgetVersion(): string {\n\t\treturn __pkg_version\n\t}\n\n\tsubscribe<EventName extends keyof E>(\n\t\tname: EventName,\n\t\thandler: EventHandler<E[EventName]>,\n\t): void {\n\t\tthis.handlers.set(\n\t\t\tname,\n\t\t\t(this.handlers.get(name) || []).concat(\n\t\t\t\thandler as EventHandler<E[keyof E]>,\n\t\t\t),\n\t\t)\n\t}\n\n\tunsubscribe<EventName extends keyof E>(\n\t\tname: EventName,\n\t\thandler: EventHandler<E[EventName]>,\n\t): void {\n\t\tthis.handlers.set(\n\t\t\tname,\n\t\t\t(this.handlers.get(name) || []).filter((h) => h !== handler),\n\t\t)\n\t}\n\n\temit<EventName extends keyof E>(\n\t\tname: EventName,\n\t\t...event: IsUndefined<E[EventName]> extends true ? [] : [E[EventName]]\n\t): void {\n\t\tconst handlers = this.handlers.get(name) || []\n\t\thandlers.forEach((h) => {\n\t\t\ttry {\n\t\t\t\t;(h as EventHandler<(typeof event)[0]>)(event[0])\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('could not invoke event listener', e)\n\t\t\t}\n\t\t})\n\t}\n}\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: GPL-3.0-or-later\n */\nimport type { EventBus } from './EventBus'\nimport type { EventHandler } from './EventHandler'\nimport type { NextcloudEvents } from './Event'\nimport type { IsUndefined } from './types.ts'\n\nimport { ProxyBus } from './ProxyBus'\nimport { SimpleBus } from './SimpleBus'\n\nexport type { EventBus } from './EventBus'\nexport type { EventHandler } from './EventHandler'\nexport type { Event, NextcloudEvents } from './Event'\n\nexport { ProxyBus } from './ProxyBus'\nexport { SimpleBus } from './SimpleBus'\n\nlet bus: EventBus | null = null\n\n/**\n * Get the event bus\n * If a bus was already created by an other app a proxy bus is returned\n * otherwise a new bus is created and registered globally\n */\nfunction getBus(): EventBus {\n\tif (bus !== null) {\n\t\treturn bus\n\t}\n\n\tif (typeof window === 'undefined') {\n\t\t// testing or SSR\n\t\treturn new Proxy({} as EventBus, {\n\t\t\tget: () => {\n\t\t\t\treturn () =>\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'Window not available, EventBus can not be established!',\n\t\t\t\t\t)\n\t\t\t},\n\t\t})\n\t}\n\n\tif (window.OC?._eventBus && typeof window._nc_event_bus === 'undefined') {\n\t\tconsole.warn(\n\t\t\t'found old event bus instance at OC._eventBus. Update your version!',\n\t\t)\n\t\twindow._nc_event_bus = window.OC._eventBus\n\t}\n\n\t// Either use an existing event bus instance or create one\n\tif (typeof window?._nc_event_bus !== 'undefined') {\n\t\tbus = new ProxyBus(window._nc_event_bus)\n\t} else {\n\t\tbus = window._nc_event_bus = new SimpleBus()\n\t}\n\treturn bus\n}\n\n/**\n * Register an event listener\n *\n * @param name name of the event\n * @param handler callback invoked for every matching event emitted on the bus\n */\nexport function subscribe<K extends keyof NextcloudEvents>(\n\tname: K,\n\thandler: EventHandler<NextcloudEvents[K]>,\n): void {\n\tgetBus().subscribe(name, handler)\n}\n\n/**\n * Unregister a previously registered event listener\n *\n * Note: doesn't work with anonymous functions (closures). Use method of an object or store listener function in variable.\n *\n * @param name name of the event\n * @param handler callback passed to `subscribed`\n */\nexport function unsubscribe<K extends keyof NextcloudEvents>(\n\tname: K,\n\thandler: EventHandler<NextcloudEvents[K]>,\n): void {\n\tgetBus().unsubscribe(name, handler)\n}\n\n/**\n * Emit an event\n *\n * @param name name of the event\n * @param event event payload\n */\nexport function emit<K extends keyof NextcloudEvents>(\n\tname: K,\n\t...event: IsUndefined<NextcloudEvents[K]> extends true\n\t\t? []\n\t\t: [NextcloudEvents[K]]\n): void {\n\tgetBus().emit(name, ...event)\n}\n"],"names":["bus","valid","major"],"mappings":";;;;;;;AAaO,MAAM,SAEb;AAAA,EACS;AAAA,EAER,YAAYA,MAAkB;AACzB,QAAA,OAAOA,KAAI,eAAe,cAAc,CAACC,eAAAA,QAAMD,KAAI,WAAW,CAAC,GAAG;AACrE,cAAQ,KAAK,0DAA0D;AAAA,IAAA,WAC7DE,eAAAA,QAAMF,KAAI,WAAW,CAAC,MAAME,uBAAM,KAAK,WAAW,CAAC,GAAG;AACxD,cAAA;AAAA,QACP,sCACCF,KAAI,WACJ,IAAA,WACA,KAAK,WAAW;AAAA,MAClB;AAAA,IAAA;AAGD,SAAK,MAAMA;AAAA,EAAA;AAAA,EAGZ,aAAqB;AACb,WAAA;AAAA,EAAA;AAAA,EAGR,UACC,MACA,SACO;AACF,SAAA,IAAI,UAAU,MAAM,OAAO;AAAA,EAAA;AAAA,EAGjC,YACC,MACA,SACO;AACF,SAAA,IAAI,YAAY,MAAM,OAAO;AAAA,EAAA;AAAA,EAGnC,KACC,SACG,OACI;AACP,SAAK,IAAI,KAAK,MAAM,GAAG,KAAK;AAAA,EAAA;AAE9B;AChDO,MAAM,UAEb;AAAA,EACS,+BAAe,IAAyC;AAAA,EAEhE,aAAqB;AACb,WAAA;AAAA,EAAA;AAAA,EAGR,UACC,MACA,SACO;AACP,SAAK,SAAS;AAAA,MACb;AAAA,OACC,KAAK,SAAS,IAAI,IAAI,KAAK,CAAI,GAAA;AAAA,QAC/B;AAAA,MAAA;AAAA,IAEF;AAAA,EAAA;AAAA,EAGD,YACC,MACA,SACO;AACP,SAAK,SAAS;AAAA,MACb;AAAA,OACC,KAAK,SAAS,IAAI,IAAI,KAAK,CAAC,GAAG,OAAO,CAAC,MAAM,MAAM,OAAO;AAAA,IAC5D;AAAA,EAAA;AAAA,EAGD,KACC,SACG,OACI;AACP,UAAM,WAAW,KAAK,SAAS,IAAI,IAAI,KAAK,CAAC;AACpC,aAAA,QAAQ,CAAC,MAAM;AACnB,UAAA;AACH;AAAE,UAAsC,MAAM,CAAC,CAAC;AAAA,eACxC,GAAG;AACH,gBAAA,MAAM,mCAAmC,CAAC;AAAA,MAAA;AAAA,IACnD,CACA;AAAA,EAAA;AAEH;AClCA,IAAI,MAAuB;AAO3B,SAAS,SAAmB;AAC3B,MAAI,QAAQ,MAAM;AACV,WAAA;AAAA,EAAA;AAGJ,MAAA,OAAO,WAAW,aAAa;AAE3B,WAAA,IAAI,MAAM,IAAgB;AAAA,MAChC,KAAK,MAAM;AACV,eAAO,MACN,QAAQ;AAAA,UACP;AAAA,QACD;AAAA,MAAA;AAAA,IACF,CACA;AAAA,EAAA;AAGF,MAAI,OAAO,IAAI,aAAa,OAAO,OAAO,kBAAkB,aAAa;AAChE,YAAA;AAAA,MACP;AAAA,IACD;AACO,WAAA,gBAAgB,OAAO,GAAG;AAAA,EAAA;AAI9B,MAAA,OAAO,QAAQ,kBAAkB,aAAa;AAC3C,UAAA,IAAI,SAAS,OAAO,aAAa;AAAA,EAAA,OACjC;AACA,UAAA,OAAO,gBAAgB,IAAI,UAAU;AAAA,EAAA;AAErC,SAAA;AACR;AAQgB,SAAA,UACf,MACA,SACO;AACA,WAAE,UAAU,MAAM,OAAO;AACjC;AAUgB,SAAA,YACf,MACA,SACO;AACA,WAAE,YAAY,MAAM,OAAO;AACnC;AAQgB,SAAA,KACf,SACG,OAGI;AACP,WAAS,KAAK,MAAM,GAAG,KAAK;AAC7B;;;;;;"}