import { EventHandler } from './EventHandler';
import { NextcloudEvents } from './Event';
import { IsUndefined } from './types.ts';
export type { EventBus } from './EventBus';
export type { EventHandler } from './EventHandler';
export type { Event, NextcloudEvents } from './Event';
export { ProxyBus } from './ProxyBus';
export { SimpleBus } from './SimpleBus';
/**
 * Register an event listener
 *
 * @param name name of the event
 * @param handler callback invoked for every matching event emitted on the bus
 */
export declare function subscribe<K extends keyof NextcloudEvents>(name: K, handler: EventHandler<NextcloudEvents[K]>): void;
/**
 * Unregister a previously registered event listener
 *
 * Note: doesn't work with anonymous functions (closures). Use method of an object or store listener function in variable.
 *
 * @param name name of the event
 * @param handler callback passed to `subscribed`
 */
export declare function unsubscribe<K extends keyof NextcloudEvents>(name: K, handler: EventHandler<NextcloudEvents[K]>): void;
/**
 * Emit an event
 *
 * @param name name of the event
 * @param event event payload
 */
export declare function emit<K extends keyof NextcloudEvents>(name: K, ...event: IsUndefined<NextcloudEvents[K]> extends true ? [] : [NextcloudEvents[K]]): void;
