"use strict";

require("core-js/modules/es.object.define-property.js");
require("core-js/modules/es.symbol.iterator.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.string.iterator.js");
require("core-js/modules/web.dom-collections.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoggerBuilder = void 0;
require("core-js/modules/es.symbol.to-primitive.js");
require("core-js/modules/es.date.to-primitive.js");
require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.number.constructor.js");
var _auth = require("@nextcloud/auth");
var _contracts = require("./contracts");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @notExported
 */
var LoggerBuilder = /*#__PURE__*/function () {
  function LoggerBuilder(factory) {
    _classCallCheck(this, LoggerBuilder);
    _defineProperty(this, "context", void 0);
    _defineProperty(this, "factory", void 0);
    this.context = {};
    this.factory = factory;
  }

  /**
   * Set the app name within the logging context
   *
   * @param appId App name
   */
  _createClass(LoggerBuilder, [{
    key: "setApp",
    value: function setApp(appId) {
      this.context.app = appId;
      return this;
    }

    /**
     * Set the logging level within the logging context
     *
     * @param level Logging level
     */
  }, {
    key: "setLogLevel",
    value: function setLogLevel(level) {
      this.context.level = level;
      return this;
    }

    /* eslint-disable jsdoc/no-undefined-types */
    /**
     * Set the user id within the logging context
     * @param uid User ID
     * @see {@link detectUser}
     */
    /* eslint-enable jsdoc/no-undefined-types */
  }, {
    key: "setUid",
    value: function setUid(uid) {
      this.context.uid = uid;
      return this;
    }

    /**
     * Detect the currently logged in user and set the user id within the logging context
     */
  }, {
    key: "detectUser",
    value: function detectUser() {
      var user = (0, _auth.getCurrentUser)();
      if (user !== null) {
        this.context.uid = user.uid;
      }
      return this;
    }

    /**
     * Detect and use logging level configured in nextcloud config
     */
  }, {
    key: "detectLogLevel",
    value: function detectLogLevel() {
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      var self = this;

      // Use arrow function to prevent undefined `this` within event handler
      var onLoaded = function onLoaded() {
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
          var _window$_oc_config$lo, _window$_oc_config;
          // Up to, including, nextcloud 24 the loglevel was not exposed
          self.context.level = (_window$_oc_config$lo = (_window$_oc_config = window._oc_config) === null || _window$_oc_config === void 0 ? void 0 : _window$_oc_config.loglevel) !== null && _window$_oc_config$lo !== void 0 ? _window$_oc_config$lo : _contracts.LogLevel.Warn;
          // Override loglevel if we are in debug mode
          if (window._oc_debug) {
            self.context.level = _contracts.LogLevel.Debug;
          }
          document.removeEventListener('readystatechange', onLoaded);
        } else {
          document.addEventListener('readystatechange', onLoaded);
        }
      };
      onLoaded();
      return this;
    }

    /** Build a logger using the logging context and factory */
  }, {
    key: "build",
    value: function build() {
      if (this.context.level === undefined) {
        // No logging level set manually, use the configured one
        this.detectLogLevel();
      }
      return this.factory(this.context);
    }
  }]);
  return LoggerBuilder;
}();
exports.LoggerBuilder = LoggerBuilder;
//# sourceMappingURL=LoggerBuilder.js.map