import { AsyncComponent } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { DefaultComputed } from 'vue/types/options.js';
import { DefaultData } from 'vue/types/options.js';
import { DefaultMethods } from 'vue/types/options.js';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { Node as Node_2 } from '@nextcloud/files';
import { PropType } from 'vue';

declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;

declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};

declare const _default: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
/** Buttons to be displayed */
buttons: IFilePickerButton[] | IFilePickerButtonFactory;
/** The name of file picker dialog (heading) */
name: string;
/**
* Can directories be picked
* @default false
*/
allowPickDirectory?: boolean;
/**
* Is the navigation disabled
*/
disabledNavigation?: boolean;
/**
* Where to mount the dialog
* @default 'body'
*/
container?: string;
/**
* Custom filter function used to filter pickable files
*/
filterFn?: IFilePickerFilter;
/**
* List of allowed mime types
* You can use placeholders for e.g. allowing all subtypes of images `['image/*']`.
* Note that if unset all files are allowed, which is the same as passing `['*∕*']`
* @default []
*/
mimetypeFilter?: string[];
/**
* Is it allowed to pick multiple files
* @default true
*/
multiselect?: boolean;
/**
* The initial path of the file picker
* @default '/'
*/
path?: string;
}>, {
allowPickDirectory: boolean;
disabledNavigation: boolean;
container: string;
filterFn: undefined;
mimetypeFilter: () => never[];
multiselect: boolean;
path: undefined;
}>, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
close: (v?: Node_2[] | undefined) => void;
}, string, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
/** Buttons to be displayed */
buttons: IFilePickerButton[] | IFilePickerButtonFactory;
/** The name of file picker dialog (heading) */
name: string;
/**
* Can directories be picked
* @default false
*/
allowPickDirectory?: boolean;
/**
* Is the navigation disabled
*/
disabledNavigation?: boolean;
/**
* Where to mount the dialog
* @default 'body'
*/
container?: string;
/**
* Custom filter function used to filter pickable files
*/
filterFn?: IFilePickerFilter;
/**
* List of allowed mime types
* You can use placeholders for e.g. allowing all subtypes of images `['image/*']`.
* Note that if unset all files are allowed, which is the same as passing `['*∕*']`
* @default []
*/
mimetypeFilter?: string[];
/**
* Is it allowed to pick multiple files
* @default true
*/
multiselect?: boolean;
/**
* The initial path of the file picker
* @default '/'
*/
path?: string;
}>, {
allowPickDirectory: boolean;
disabledNavigation: boolean;
container: string;
filterFn: undefined;
mimetypeFilter: () => never[];
multiselect: boolean;
path: undefined;
}>>>, {
path: string;
allowPickDirectory: boolean;
multiselect: boolean;
disabledNavigation: boolean;
container: string;
filterFn: IFilePickerFilter;
mimetypeFilter: string[];
}>;

/**
 * FilePicker Vue component (implemented as async component)
 * @example
 * ```vue
 * <template>
 *   <FilePicker name="Select a file" :buttons="buttons" />
 * </template>
 * <script setup lang="ts">
 *   import { FilePickerVue as FilePicker, type IFilePickerButton } from '@nextcloud/dialogs'
 *   const buttons: IFilePickerButton[] = [{
 *     label: 'Pick',
 *     callback: (nodes) => console.log('Picked', nodes)
 *   }]
 * </script>
 */
export declare const FilePickerVue: AsyncComponent<DefaultData<never>, DefaultMethods<never>, DefaultComputed, IFilePickerProps>;

/**
 * Interface for defining buttons passed to the Dialog component
 * See NcDialogButton
 */
declare interface IDialogButton {
    /** Label of the button */
    label: string;
    /** Callback on button click */
    callback: () => void;
    /**
     * Optional Icon for the button
     * Should be a SVG image as raw string
     */
    icon?: string;
    /**
     * Button type
     * @see https://nextcloud-vue-components.netlify.app/#/Components/NcButton
     */
    type?: 'primary' | 'secondary' | 'error' | 'warning' | 'success';
    /**
     * Disabled state of the button
     * @default false
     */
    disabled?: boolean;
}

/**
 * Interface to define buttons of the FilePicker component
 * The buttons are based on the Dialog buttons but the callback gets the array of selected nodes
 */
export declare interface IFilePickerButton extends Omit<IDialogButton, 'callback'> {
    /**
     * Callback on button click
     *
     * @param nodes Array of `@nextcloud/files` Nodes that were selected
     */
    callback: (nodes: Node_2[]) => void;
}

export declare type IFilePickerButtonFactory = (selectedNodes: Node_2[], currentPath: string, currentView: string) => IFilePickerButton[];

/**
 * Type of filter functions to filter the FilePicker's file list
 */
export declare type IFilePickerFilter = (node: Node_2) => boolean;

declare type IFilePickerProps = (_default)['props'];

export { }
